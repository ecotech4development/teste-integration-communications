/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  HTTPValidationError,
  ReadItemItemsItemIdGetParams
} from '../fastAPI.schemas'
import { customInstance } from '../../api';
import type { ErrorType } from '../../api';



/**
 * @summary Read Root
 */
export const readRootGet = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/`, method: 'GET', signal
    },
      );
    }
  

export const getReadRootGetQueryKey = () => {
    return [`/`] as const;
    }

    
export const getReadRootGetQueryOptions = <TData = Awaited<ReturnType<typeof readRootGet>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadRootGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readRootGet>>> = ({ signal }) => readRootGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadRootGetQueryResult = NonNullable<Awaited<ReturnType<typeof readRootGet>>>
export type ReadRootGetQueryError = ErrorType<unknown>


export function useReadRootGet<TData = Awaited<ReturnType<typeof readRootGet>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readRootGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadRootGet<TData = Awaited<ReturnType<typeof readRootGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readRootGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadRootGet<TData = Awaited<ReturnType<typeof readRootGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Root
 */

export function useReadRootGet<TData = Awaited<ReturnType<typeof readRootGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadRootGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Read Item
 */
export const readItemItemsItemIdGet = (
    itemId: number,
    params?: ReadItemItemsItemIdGetParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/items/${itemId}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getReadItemItemsItemIdGetQueryKey = (itemId: number,
    params?: ReadItemItemsItemIdGetParams,) => {
    return [`/items/${itemId}`, ...(params ? [params]: [])] as const;
    }

    
export const getReadItemItemsItemIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readItemItemsItemIdGet>>, TError = ErrorType<HTTPValidationError>>(itemId: number,
    params?: ReadItemItemsItemIdGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readItemItemsItemIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadItemItemsItemIdGetQueryKey(itemId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readItemItemsItemIdGet>>> = ({ signal }) => readItemItemsItemIdGet(itemId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(itemId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readItemItemsItemIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadItemItemsItemIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readItemItemsItemIdGet>>>
export type ReadItemItemsItemIdGetQueryError = ErrorType<HTTPValidationError>


export function useReadItemItemsItemIdGet<TData = Awaited<ReturnType<typeof readItemItemsItemIdGet>>, TError = ErrorType<HTTPValidationError>>(
 itemId: number,
    params: undefined |  ReadItemItemsItemIdGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readItemItemsItemIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readItemItemsItemIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadItemItemsItemIdGet<TData = Awaited<ReturnType<typeof readItemItemsItemIdGet>>, TError = ErrorType<HTTPValidationError>>(
 itemId: number,
    params?: ReadItemItemsItemIdGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readItemItemsItemIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readItemItemsItemIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadItemItemsItemIdGet<TData = Awaited<ReturnType<typeof readItemItemsItemIdGet>>, TError = ErrorType<HTTPValidationError>>(
 itemId: number,
    params?: ReadItemItemsItemIdGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readItemItemsItemIdGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Item
 */

export function useReadItemItemsItemIdGet<TData = Awaited<ReturnType<typeof readItemItemsItemIdGet>>, TError = ErrorType<HTTPValidationError>>(
 itemId: number,
    params?: ReadItemItemsItemIdGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readItemItemsItemIdGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadItemItemsItemIdGetQueryOptions(itemId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



